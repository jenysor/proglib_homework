name: Run tests

on: push

jobs:
#  windows:
#    runs-on: ${{ matrix.os }}
#
#    strategy:
#      fail-fast: false
#
#      matrix:
#        os: [windows-latest]
#        build_type: [Release]
#        c_compiler: [cl, gcc]
#        include:
#          - os: windows-latest
#            c_compiler: cl
#            cpp_compiler: cl
#          - os: windows-latest
#            c_compiler: gcc
#            cpp_compiler: g++
#
#    steps:
#      - uses: actions/checkout@v4
#        with:
#          submodules: 'recursive'
#
#      - name: Set reusable strings
#        id: strings
#        shell: bash
#        run: |
#          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
#
#      - name: Configure CMake
#        run: >
#          cmake -B ${{ steps.strings.outputs.build-output-dir }}
#          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
#          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
#          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
#          -S ${{ github.workspace }}
#
#      - name: Build
#        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}
#
#      - name: Test
#        working-directory: build
#        env:
#          LD_LIBRARY_PATH: ${{ github.workspace }}/build
#        run: ctest --build-config Release --verbose --output-on-failure


  ubuntu:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false

      matrix:
        os: [ubuntu-latest]
        build_type: [Release]
        c_compiler: [gcc] #, clang
        include:
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
#          - os: ubuntu-latest
#            c_compiler: clang
#            cpp_compiler: clang++

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-13 g++-13 gcovr
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-13 90
          sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-13 90
          gcc --version
          gcov --version

      - name: Set reusable strings
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
          echo "coverage-output-dir=${{ github.workspace }}/coverage_report" >> "$GITHUB_OUTPUT"

      - name: Configure CMake with coverage
        run: >
          cmake -B ${{ steps.strings.outputs.build-output-dir }}
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -DCMAKE_CXX_FLAGS="--coverage -fprofile-arcs -ftest-coverage -O0"
          -DCMAKE_C_FLAGS="--coverage -fprofile-arcs -ftest-coverage -O0"
          -S ${{ github.workspace }}

      - name: Build
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}
        
      - name: Run tests with coverage
        working-directory: build
        env:
          LD_LIBRARY_PATH: ${{ github.workspace }}/build
        run: |
          ctest --build-config Release --verbose --output-on-failure
          gcovr --exclude '.*/test/.*' '.*/CMakeFiles/.*' --exclude-unreachable-branches --root ${{ github.workspace }} --html-details coverage_report.html --print-summary

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: build/coverage_report.html

